#!/bin/bash

set -e
#set -u

SC_PATH=`realpath $0`
SC_PATH=${SC_PATH%/Nanodecoder}

nanodecoder=$SC_PATH/bin/nanodecoder
samprocessor=$SC_PATH/bin/processSam
minimap2=`which minimap2`
chimeraSaver=$SC_PATH/bin/chimeraSaver

HELP=`cat << EOF
Nanodecoder v1.0.0
Lin Lyu
Nanodecoder [opt] <args> ...

Requested:
	-i	input fastq/fastq.gz file
	-t	'3' for 3' sequencing, '5' for 5' sequencing
	-r	reference for minimap2
Optional:
	-w	barcode whitelist (default: 700k barcode whitelist from 10x genomics)
	-m	mismatch (default: 1)
	-l	barcode search range (default: 100)
	-@	number of thread used (default: 4)

See 'https://github.com/affinis/Nanodecoder' for further description.
EOF
`
if [ -z $1 ]
then
	echo "$HELP"
	exit
fi

barcode_white_list=$SC_PATH/whitelists/700kBarcode.lst
barcode_search_range=100
mismatch=1
thread=4

while getopts hi:t:w:r:l:m:@: options
do
	case $options in
	h)
		echo "$HELP"
		exit
		;;
	i)
		fastq_filename=$OPTARG
		;;
	t)
		tech=$OPTARG
		;;
	w)
		barcode_white_list=$OPTARG
		;;
	r)
		reference_for_minimap2=$OPTARG
		;;
	l)
		barcode_search_range=$OPTARG
		;;
	m)
		mismatch=$OPTARG
		;;
	@)
		thread=$OPTARG
		;;
	*)
		echo "$HELP"
		exit
		;;
	esac
done

echo "Input fastq: $fastq_filename, tech $tech, barcodeWhiteList $barcode_white_list, range: $barcode_search_range, mismatch $mismatch, thread $thread"

#initial processing of reads, filter reads that do not contain R1 and/or TSO, output: read_summary.tsv, filtered.fastq.gz
$nanodecoder -f $fastq_filename -t $tech -b $barcode_white_list -r $barcode_search_range -m $mismatch -@ $thread > read_summary.tsv

#seqence alignment, output: aln.sam
$minimap2 -ax splice -uf -k14 $reference_for_minimap2 filtered.fastq.gz > aln.sam

#filter for chimeric read ids and collect fine mapping results from SAM file, output: chimeric_read_ids.lst, reads_properly_mapped.tsv
$samprocessor -f aln.sam -m $SC_PATH/IDs2Names.tsv

#collect read and initial barcode flags from 'filtered.fastq.gz' and 'read_summary.tsv'
zgrep -f chimeric_read_ids.lst -A 3 filtered.fastq.gz | grep -v '^--$' > chimeric_read.fastq
grep -f chimeric_read_ids.lst -w read_summary.tsv > chimeric_read_init_summary.tsv

#split chimera, output: read_split_report.tsv, chimeric_filtered.fastq.gz, splited_read_summary.tsv
$chimeraSaver -f chimeric_read.fastq -s chimeric_read_init_summary.tsv -d $mismatch -l $barcode_search_range -t $tech -b $barcode_white_list > splited_read_summary.tsv

#align splited reads
$minimap2 -ax splice -uf -k14 $reference_for_minimap2 chimeric_filtered.fastq.gz > splited.aln.sam

#add splited align results to count table, output: apped to chimeric_read_ids.lst, reads_properly_mapped.tsv
$samprocessor -f splited.aln.sam -m $SC_PATH/IDs2Names.tsv

#collect counts
cat reads_properly_mapped.tsv | tr '_' '\t' | cut -f 2,3 | sort | uniq -c | awk '{print $2"\t"$3"\t"$1}' > counts.tsv
